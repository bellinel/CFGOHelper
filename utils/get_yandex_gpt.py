import asyncio
import json
import re
from yandex_cloud_ml_sdk import YCloudML

from dotenv import load_dotenv
import os

load_dotenv()

def extract_json_from_text(text):
    match = re.search(r'\{.*\}', text, re.DOTALL)
    if match:
        return match.group(0)
    return None


async def yandex_gpt_async(resume, vacancy):
    ID = os.getenv('ID')
    API_KEY = os.getenv('API_KEY')


    promt = """
Проанализируй это резюме как опытный карьерный консультант. Оцени структуру, стиль и содержание. Укажи, что можно улучшить, убрать или усилить, чтобы резюме произвело лучшее впечатление на рекрутера в сфере финансов
Сравни это резюме с вакансией. Оцени, насколько кандидат соответствует требованиям, и какие формулировки стоит усилить или добавить, чтобы повысить шансы на получение приглашения на собеседование
Оцени вероятность прохождения фильтра ATS данного резюме на указанную должность в % не объясняй почему так думаешь. Дай ответ в формате: Вероятность прохождения вашего резюме на вакансию (возьми из названия вакансии + компания) через фильтр ATS составляет хх%
"""

    
    
    messages = [
    {
        "role": "system",
        "text": promt,
    },
    {
        "role": "user",
        "text": f'Резюме: {resume}\nВакансия: {vacancy}',
    },
]
    
   

    sdk = YCloudML(
        folder_id=ID,
        auth=API_KEY,
    )
    result = (
        sdk.models.completions("yandexgpt").configure(temperature=0.5).run(messages, timeout=180)
    )
    text = result.alternatives[0].text
    return text


async def yandex_gpt_save_vacancy(resume, vacancy):
    ID = os.getenv('ID')
    API_KEY = os.getenv('API_KEY')

    prompt = f"""
Проанализируй резюме кандидата и выполни следующие инструкции. Не добавляй никаких комментариев и объяснений. Верни результат строго в формате JSON.

Инструкция:



ФИО:  [Назови пожалуйста Фамилию Имя Отчество кандидата без объяснений]​

Контакты: [Напиши контактные данные кандидата. Без комментариев.]​

Возраст: [Как ты думаешь, какой возраст кандидата? Не объясняй почему ты так думаешь.]​

Месяцев без работы: [Сколько месяцев кандидат не работает. Не объясняй почему так думаешь.]​

Частота смены работы: [Напиши среднее время работы за последние 5 лет, включая последнее место работы. Не объясняй почему так думаешь.]​

Должности из резюме: [Назови пожалуйста последние 3 должности кандидата без объяснений]​

Отрасли и компании из резюме: [Назови только компанию и отрасль, в которых работал кандидат за последние 5 лет без объяснений]​

Обороты бизнеса: [Какие обороты имели компании в которых работал кандидат за последние 3 года без комментариев]​

Опыт с системами: [Дай список систем, опыт работы с которыми имеет кандидат без комментариев]​

Языки: [Какие иностранные языки знает кандидат. Без комментариев]​

Должность  из вакансии [Какая должность в вакансии? Без деталей и без слова "Должность“]​

Отрасль из вакансии [Какая отрасль в вакансии? Без деталей и без слова «Отрасль»]​

​

Используй информацию из резюме и вакансии. Если каких-то данных нет, оставь соответствующее поле пустым.

Формат результата:
{{
  "ФИО": "",
  "Контакты": "",
  "Возраст": "",
  "Месяцев без работы": "",
  "Частота смены работы": "",
  "Должности из резюме": [...],
  "Отрасли и компании из резюме": [...],
  "Обороты бизнеса": [...],
  "Опыт с системами": [...],
  "Языки": [...],
  "Название должности из вакансии": "",
  "Отрасль из вакансии": ""
}}

Данные кандидата (резюме):
\"\"\"
{resume}
\"\"\"

Текст вакансии:
\"\"\"
{vacancy}
\"\"\"

Твоя задача:
1. Извлеки нужные данные из резюме и вакансии.
2. Заполни каждое поле строго по формату.
3. Сохрани рекомендации в отдельный файл (виртуально) и укажи ссылку на него.
4. Верни только JSON — без текста, объяснений и пояснений.
"""
    
    messages = [
    {
        "role": "system",
        "text": prompt,
    },
    {
        "role": "user",
        "text": f'Резюме: {resume}\nВакансия: {vacancy}',
    },
]
    
    sdk = YCloudML(
            folder_id=ID,
            auth=API_KEY,
        )
    result = (
        sdk.models.completions("yandexgpt").configure(temperature=0.5).run(messages, timeout=180)
    )
    text = extract_json_from_text(result.alternatives[0].text)
    text = json.loads(text)
    return text




